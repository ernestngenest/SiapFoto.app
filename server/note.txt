'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Image extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      Image.belongsTo(models.User , {foreignKey : "userId"})
    }
  }
  Image.init({
    imgUrl: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
            notNull: {
                msg: "imgUrl is required",
            },
            notEmpty: {
                msg: "imgUrl is required",
            },
        },
    },
    userid: {
        type: DataTypes.INTEGER,
        allowNull: false,
        validate: {
            notNull: {
                msg: "userid is required",
            },
            notEmpty: {
                msg: "userid is required",
            },
        },
    },
    prompt: DataTypes.STRING
  }, {
    sequelize,
    modelName: 'Image',
  });
  return Image;
};

===================================


'use strict';
const {
  Model
} = require('sequelize');
const { hashToken } = require('../helpers/bcrypt');
module.exports = (sequelize, DataTypes) => {
  class User extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      User.hasMany(models.Image , {foreignKey : "userId"})
    }
  }
  User.init({
    username: DataTypes.STRING,
    email: DataTypes.STRING,
    password: DataTypes.STRING
  }, {
    sequelize,
    modelName: 'User',
  });
  User.beforeCreate((user , option) => {
    user.password = hashToken(user.password)
  })
  return User;
};

==================


{
    "ok": true,
    "gallery_edit": "https://imgbox.com/gallery/edit/4X0VMsxGT1/oocCShAwYnIaGTJg",
    "files": [
        {
            "id": "LwRWEwag",
            "slug": "LwRWEwag",
            "name": "91c34d13-19a5-467d-95a5-ece2a44b4f75.jpg",
            "name_html_escaped": "91c34d13-19a5-467d-95a5-ece2a44b4f75.jpg",
            "created_at": "2024-09-05T07:37:23.503Z",
            "created_at_human": "September 05, 2024 07:37",
            "updated_at": "2024-09-05T07:37:27.553Z",
            "gallery_id": "4X0VMsxGT1",
            "url": "https://imgbox.com/LwRWEwag",
            "original_url": "https://images2.imgbox.com/51/22/LwRWEwag_o.jpg",
            "thumbnail_url": "https://thumbs2.imgbox.com/51/22/LwRWEwag_t.jpg",
            "square_url": "https://thumbs2.imgbox.com/51/22/LwRWEwag_b.jpg",
            "selected": false,
            "comments_enabled": 0,
            "comments_count": 0
        }
    ]
}

==================


<svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="feather feather-log-out w-5 h-5 mr-4"
              viewBox="0 0 24 24">
              <path d="M17 18a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2"></path>
              <polyline points="7 7 12 12 7 17"></polyline>
              <line x1="15" y1="12" x2="3" y2="12"></line>
            </svg>


      ====================================

 const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: import.meta.env.VITE_EMAIL,
      pass: import.meta.env.VITE_PASSWORD, // Consider using OAuth2 or app-specific passwords
    },
  });

  const mailOptions = {
    from: import.meta.env.VITE_EMAIL, // sender address
    to: "", // list of receivers
    subject: "Hello with Embedded Image", // Subject line
    html: `
    <h1>Hello</h1>
    <p>This is an email with an embedded image below:</p>
    <img src=${detailData.imgUrl} />
  `,
    attachments: [
      {
        filename: "image.png", // filename in email
        path: detailData.imgUrl, // file path on your machine
        cid: "unique@image.id", // CID to reference the image
      },
    ],
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      return console.log(error);
    }
    console.log('Email sent: ' + info.response);
  });
